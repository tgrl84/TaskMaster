// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskMaster;

#nullable disable

namespace TaskManager.MigrationsRunner.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    partial class TaskManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TaskMaster.Commentaire", b =>
                {
                    b.Property<int>("IdCommentaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCommentaire"));

                    b.Property<int>("AuteurIdUtilisateur")
                        .HasColumnType("int");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCommentaire")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdAuteur")
                        .HasColumnType("int");

                    b.Property<int>("IdTache")
                        .HasColumnType("int");

                    b.Property<int>("TacheIdTache")
                        .HasColumnType("int");

                    b.HasKey("IdCommentaire");

                    b.HasIndex("AuteurIdUtilisateur");

                    b.HasIndex("TacheIdTache");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("TaskMaster.Etiquette", b =>
                {
                    b.Property<int>("IdEtiquette")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEtiquette"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdEtiquette");

                    b.ToTable("Etiquettes");
                });

            modelBuilder.Entity("TaskMaster.HistoriqueModification", b =>
                {
                    b.Property<int>("IdModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdModification"));

                    b.Property<int>("AuteurIdUtilisateur")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescriptionModif")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdAuteur")
                        .HasColumnType("int");

                    b.Property<int>("IdTache")
                        .HasColumnType("int");

                    b.Property<int>("TacheIdTache")
                        .HasColumnType("int");

                    b.HasKey("IdModification");

                    b.HasIndex("AuteurIdUtilisateur");

                    b.HasIndex("TacheIdTache");

                    b.ToTable("HistoriqueModifications");
                });

            modelBuilder.Entity("TaskMaster.Projet", b =>
                {
                    b.Property<int>("IdProjet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdProjet"));

                    b.Property<string>("DescriptionProjet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomProjet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdProjet");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("TaskMaster.SousTache", b =>
                {
                    b.Property<int>("IdSousTache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSousTache"));

                    b.Property<DateTime>("Echeance")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdTacheParent")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TacheParentIdTache")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdSousTache");

                    b.HasIndex("TacheParentIdTache");

                    b.ToTable("SousTaches");
                });

            modelBuilder.Entity("TaskMaster.Tache", b =>
                {
                    b.Property<int>("IdTache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTache"));

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Echeance")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdAuteur")
                        .HasColumnType("int");

                    b.Property<int>("IdRealisateur")
                        .HasColumnType("int");

                    b.Property<string>("Priorite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdTache");

                    b.HasIndex("IdAuteur");

                    b.HasIndex("IdRealisateur");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("TaskMaster.TacheEtiquette", b =>
                {
                    b.Property<int>("IdTache")
                        .HasColumnType("int");

                    b.Property<int>("IdEtiquette")
                        .HasColumnType("int");

                    b.Property<int>("EtiquetteIdEtiquette")
                        .HasColumnType("int");

                    b.Property<int>("TacheIdTache")
                        .HasColumnType("int");

                    b.HasKey("IdTache", "IdEtiquette");

                    b.HasIndex("EtiquetteIdEtiquette");

                    b.HasIndex("TacheIdTache");

                    b.ToTable("TachesEtiquettes");
                });

            modelBuilder.Entity("TaskMaster.TacheProjet", b =>
                {
                    b.Property<int>("IdTache")
                        .HasColumnType("int");

                    b.Property<int>("IdProjet")
                        .HasColumnType("int");

                    b.Property<int>("ProjetIdProjet")
                        .HasColumnType("int");

                    b.Property<int>("TacheIdTache")
                        .HasColumnType("int");

                    b.HasKey("IdTache", "IdProjet");

                    b.HasIndex("ProjetIdProjet");

                    b.HasIndex("TacheIdTache");

                    b.ToTable("TachesProjets");
                });

            modelBuilder.Entity("TaskMaster.Utilisateur", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUtilisateur"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("TaskMaster.Commentaire", b =>
                {
                    b.HasOne("TaskMaster.Utilisateur", "Auteur")
                        .WithMany("Commentaires")
                        .HasForeignKey("AuteurIdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMaster.Tache", "Tache")
                        .WithMany("Commentaires")
                        .HasForeignKey("TacheIdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("TaskMaster.HistoriqueModification", b =>
                {
                    b.HasOne("TaskMaster.Utilisateur", "Auteur")
                        .WithMany("Modifications")
                        .HasForeignKey("AuteurIdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMaster.Tache", "Tache")
                        .WithMany("HistoriqueModifications")
                        .HasForeignKey("TacheIdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("TaskMaster.SousTache", b =>
                {
                    b.HasOne("TaskMaster.Tache", "TacheParent")
                        .WithMany("SousTaches")
                        .HasForeignKey("TacheParentIdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TacheParent");
                });

            modelBuilder.Entity("TaskMaster.Tache", b =>
                {
                    b.HasOne("TaskMaster.Utilisateur", "Auteur")
                        .WithMany("TachesAuteurs")
                        .HasForeignKey("IdAuteur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskMaster.Utilisateur", "Realisateur")
                        .WithMany("TachesRealisateurs")
                        .HasForeignKey("IdRealisateur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Realisateur");
                });

            modelBuilder.Entity("TaskMaster.TacheEtiquette", b =>
                {
                    b.HasOne("TaskMaster.Etiquette", "Etiquette")
                        .WithMany("TachesEtiquettes")
                        .HasForeignKey("EtiquetteIdEtiquette")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMaster.Tache", "Tache")
                        .WithMany("TachesEtiquettes")
                        .HasForeignKey("TacheIdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etiquette");

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("TaskMaster.TacheProjet", b =>
                {
                    b.HasOne("TaskMaster.Projet", "Projet")
                        .WithMany("TachesProjets")
                        .HasForeignKey("ProjetIdProjet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMaster.Tache", "Tache")
                        .WithMany("TachesProjets")
                        .HasForeignKey("TacheIdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projet");

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("TaskMaster.Etiquette", b =>
                {
                    b.Navigation("TachesEtiquettes");
                });

            modelBuilder.Entity("TaskMaster.Projet", b =>
                {
                    b.Navigation("TachesProjets");
                });

            modelBuilder.Entity("TaskMaster.Tache", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("HistoriqueModifications");

                    b.Navigation("SousTaches");

                    b.Navigation("TachesEtiquettes");

                    b.Navigation("TachesProjets");
                });

            modelBuilder.Entity("TaskMaster.Utilisateur", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("Modifications");

                    b.Navigation("TachesAuteurs");

                    b.Navigation("TachesRealisateurs");
                });
#pragma warning restore 612, 618
        }
    }
}
